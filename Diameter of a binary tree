/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 
// The Problem is to calculate the diameter of a binary tree, diameter of BT is basically the longest distance between any 2 nodes in the tree.
// here i implemented a function depth that calculates the depth of any tree given its root,
// then in the diameter function i calculated the left and the right subtree depths and done that recusrsively until obtaining the max (depth(left)+depth(right)) ,
// which is luckily the diameter of the BT.
class Solution {
public:
    int mx = 0,dist ; 
    int depth(TreeNode* p ){
        if (p){
            int l = depth(p->left) ;
            int r = depth(p->right) ;
            
            if (l>r){
                return l+1 ;
            }
            else
                return r+1 ;
        }
        return 0 ;
    }
    
    int diameterOfBinaryTree(TreeNode* root) {   
        if (root){
           if (root->left && root->right)
                dist = depth(root->left)+depth(root->right) ;
           else if (root->left == NULL)
                dist = depth(root->right) ;
           else if (root->right == NULL)
                dist = depth(root->left) ;
            mx = max(mx,dist) ;
            diameterOfBinaryTree(root->left) ;
            diameterOfBinaryTree(root->right) ;
        }
        return mx ;
    }
};
